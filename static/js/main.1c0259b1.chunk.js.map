{"version":3,"sources":["utils.js","Point3D.js","Polygon3D.js","Surface3D.js","Marks.js","Walls.js","Floor.js","Camera.js","Surface.js","App.js","index.js"],"names":["readData","data","columns","slice","index_name","map","column","values","row","index","normDataframe","dataframe","scaleColumns","scaleLinear","domain","extent","range","scaleValues","flat","scaleIndex","x","compare","a","b","centroid","Point3D","coordinates","this","y","z","vector","matrix","transformation","multiply","subset","Polygon3D","points","generator","line","point","apply","mean","ans","i","length","p1","p2","Surface3D","df","polygons","coords","j","push","shape","polygon","sort","Marks","camera","colorScale","marks","view","useEffect","selectAll","paths","path","className","d","fill","area","color","colorValue","darker","Walls","angles","alpha","Math","PI","xWall","yWall","opacity","Floor","floor","Camera","initCoordinates","console","log","transformations","gamma","c","cos","s","sin","beta","trf","center","translate","rotations","_rotateX","_rotateY","_rotateZ","reduce","p","fieldOfView","near","far","tan","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","select","call","scaleColor","scaleSequential","interpolateViridis","rotate","perspective","scale","transform","App","setDataframe","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c0259b1.chunk.js","sourcesContent":["import { extent } from \"d3-array\"\r\nimport { scaleLinear } from \"d3-scale\"\r\n\r\nexport const readData = data => {\r\n    let columns = data.columns.slice(1)\r\n    const index_name = data.columns[0]\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const normDataframe = dataframe => {\r\n    // values are inverted\r\n    const scaleColumns = scaleLinear().domain(extent(dataframe.columns)).range([-1, 1])\r\n    const scaleValues = scaleLinear().domain(extent(dataframe.values.flat())).range([1, -1])\r\n    const scaleIndex = scaleLinear().domain(extent(dataframe.index)).range([-1, 1])\r\n\r\n    return {\r\n        columns: dataframe.columns.map(x => scaleColumns(x)),\r\n        values: dataframe.values.map(row => row.map(x => scaleValues(x))),\r\n        index: dataframe.index.map(x=> scaleIndex(x)),\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    const coord = 'y'\r\n\r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { matrix, multiply, index } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        const [x, y, z] = coordinates\r\n        // mutable coordinates\r\n        this.vector = matrix([\r\n            [x],\r\n            [y],\r\n            [z],\r\n            [1],\r\n        ])\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.vector = multiply(transformation, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    get x() {\r\n        return this.vector.subset(index(0, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get y() {\r\n        return this.vector.subset(index(1, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get z() {\r\n        return this.vector.subset(index(2, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.points = this.points.map(point => point.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        let ans = 0\r\n        const points = [...this.points, this.points[0]]\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            ans += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return ans\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { mean } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        const coords = (i, j) => [\r\n            df.columns[j], df.index[i], df.values[i][j]\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.polygons = this.polygons.map(shape => shape.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll, color } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Marks = ({ df, camera, colorScale }) => {\r\n    let marks = new Surface3D(df)\r\n        .apply(camera.view)\r\n    \r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={path.area > 0 ? color(colorScale(path.colorValue)).darker() : colorScale(path.colorValue)}\r\n    />)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\n\r\n\r\nexport const Walls = ({ df, camera, angles }) => {\r\n    // xWall\r\n    const x = angles.alpha < Math.PI ? -1.075 : 1.075\r\n\r\n    let xWall = new Polygon3D([[x, 1, 1], [x, 1, -1], [x, -1, -1], [x, -1, 1]])\r\n        .apply(camera.view)\r\n\r\n    // yWall\r\n    const y = angles.alpha > 1.5 * Math.PI || angles.alpha < 0.5 * Math.PI ? -1.075 : 1.075\r\n\r\n    let yWall = new Polygon3D([[1, y, 1], [1, y, -1], [-1, y, -1], [-1, y, 1]])\r\n        .apply(camera.view)\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => {\r\n        selectAll('.xWall').data(xWall)\r\n        selectAll('.yWall').data(yWall)\r\n    })\r\n\r\n    return (<g>\r\n        <path\r\n            className='xWall'\r\n            d={xWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />\r\n        <path\r\n            className='yWall'\r\n            d={yWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />\r\n    </g>)\r\n}","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\n\r\nexport const Floor = ({ camera }) => {\r\n    let floor = new Polygon3D([[1, 1, 1.075], [1, -1, 1.075], [-1, -1, 1.075], [-1, 1, 1.075]])\r\n        .apply(camera.view)\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.floor').data(floor))\r\n\r\n    return <path\r\n        className='floor'\r\n        d={floor.data}\r\n        opacity='60%'\r\n        fill='grey'\r\n    />\r\n}","import { matrix, multiply, inv, sin, cos, tan } from 'mathjs'\r\n\r\nexport class Camera {\r\n    constructor(initCoordinates = [0, 0, 0]) {\r\n        console.log('camera')\r\n        //\r\n        const [x, y, z] = initCoordinates\r\n\r\n        //\r\n        this.transformations = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const c = cos(gamma)\r\n        const s = sin(gamma)\r\n\r\n        return matrix([\r\n            [1, 0, +0, 0],\r\n            [0, c, -s, 0],\r\n            [0, s, +c, 0],\r\n            [0, 0, +0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const c = cos(beta)\r\n        const s = sin(beta)\r\n\r\n        return matrix([\r\n            [+c, 0, s, 0],\r\n            [+0, 1, 0, 0],\r\n            [-s, 0, c, 0],\r\n            [+0, 0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const c = cos(alpha)\r\n        const s = sin(alpha)\r\n\r\n        return matrix([\r\n            [c, -s, 0, 0],\r\n            [s, +c, 0, 0],\r\n            [0, +0, 1, 0],\r\n            [0, +0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    scale(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [x, 0, 0, 0],\r\n            [0, y, 0, 0],\r\n            [0, 0, z, 0],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.translate(center.map(c => -c))\r\n\r\n        const rotations = [\r\n            this._rotateX(angles.gamma),\r\n            this._rotateY(angles.beta),\r\n            this._rotateZ(angles.alpha),\r\n        ]\r\n\r\n        const trf = rotations.reduce((p, c) => multiply(p, c))\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        const a = tan(0.5 * (Math.PI - fieldOfView))\r\n        const b = 2 * near * far / (near - far)\r\n        const c = (near + far) / (near - far)\r\n\r\n        const trf = matrix([\r\n            [a, +0, 0, 0],\r\n            [0, +c, 0, b],\r\n            [0, +0, a, 0],\r\n            [0, -1, 0, 0],\r\n        ])\r\n        \r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    get view() {\r\n        // return inv(this.transformations)\r\n        return this.transformations\r\n    }\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { selectAll, select, drag, scaleSequential, interpolateViridis } from 'd3';\r\nimport { mod } from 'mathjs';\r\n\r\n// import { Point3D } from './Point3D';\r\nimport { compare } from './utils';\r\nimport { Marks } from './Marks';\r\nimport { Walls } from './Walls';\r\nimport { Floor } from './Floor';\r\nimport { Camera } from './Camera';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: Math.PI / 4,\r\n    beta: 0,\r\n    gamma: Math.PI / 4\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n    \r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha - (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        beta: angles.beta,\r\n        gamma: mod(angles.gamma + (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n            .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n    })\r\n\r\n    // objects NOTE: creating new objects for every render might lead to performance issues\r\n    const scaleColor = scaleSequential(interpolateViridis).domain([1, -1])\r\n\r\n    let camera = new Camera()\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([300, 300, 300])\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                <Floor df={df} camera={camera} />\r\n                <Walls df={df} camera={camera} angles={angles} />\r\n                <Marks df={df} camera={camera} colorScale={scaleColor}/>\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData, normDataframe } from './utils'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataframe, setDataframe] = useState(null)\n\n  // before rendering\n  useEffect(() => csv(url).then(readData).then(normDataframe).then(setDataframe), [])\n\n  if (!dataframe)\n    return 'Loading...'\n\n  console.log(dataframe)\n\n  return (\n    <div>\n      <Surface df={dataframe} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}