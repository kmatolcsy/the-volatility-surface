{"version":3,"sources":["utils.js","Point3D.js","Polygon3D.js","Surface3D.js","Marks.js","Walls.js","Floor.js","Surface.js","App.js","index.js"],"names":["readData","data","columns","slice","index_name","map","column","values","row","index","normDataframe","dataframe","scaleColumns","scaleLinear","domain","extent","range","scaleValues","flat","scaleIndex","x","labels","compare","a","b","centroid","Point3D","coordinates","this","y","z","w","gamma","cos","sin","beta","alpha","angles","center","translate","c","_rotateZ","_rotateY","_rotateX","fieldOfView","near","far","tan","Math","PI","Polygon3D","points","generator","line","point","scale","rotate","perspective","mean","ans","i","length","p1","p2","Surface3D","df","polygons","coords","j","push","polygon","sort","Marks","colorScale","marks","useEffect","selectAll","paths","path","className","d","fill","area","color","colorValue","darker","Walls","trf","xWall","xGrid","entries","yWall","yGrid","zGrid","start","stop","num","step","Array","from","_","linspace","text","position","opacity","stroke","strokeWidth","Floor","floor","grid","children","toFixed","fontSize","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","select","call","scaleColor","scaleSequential","interpolateViridis","obj","transform","App","setDataframe","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c46fcdc1.chunk.js","sourcesContent":["import { extent } from \"d3-array\"\r\nimport { scaleLinear } from \"d3-scale\"\r\n\r\nexport const readData = data => {\r\n    let columns = data.columns.slice(1)\r\n    const index_name = data.columns[0]\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const normDataframe = dataframe => {\r\n    // values are inverted\r\n    const scaleColumns = scaleLinear().domain(extent(dataframe.columns)).range([-1, 1])\r\n    const scaleValues = scaleLinear().domain(extent(dataframe.values.flat())).range([1, -1])\r\n    const scaleIndex = scaleLinear().domain(extent(dataframe.index)).range([-1, 1])\r\n\r\n    return {\r\n        columns: dataframe.columns.map(x => scaleColumns(x)),\r\n        values: dataframe.values.map(row => row.map(x => scaleValues(x))),\r\n        index: dataframe.index.map(x=> scaleIndex(x)),\r\n        labels: dataframe\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    const coord = 'y'\r\n\r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { cos, sin, tan } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        // mutable coordinates\r\n        this.x = coordinates[0]\r\n        this.y = coordinates[1]\r\n        this.z = coordinates[2]\r\n        this.w = 1\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const { y, z } = this\r\n\r\n        this.y = cos(gamma) * y + sin(gamma) * z\r\n        this.z = cos(gamma) * z - sin(gamma) * y\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const { x, z } = this\r\n\r\n        this.x = cos(beta) * x - sin(beta) * z\r\n        this.z = cos(beta) * z + sin(beta) * x\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const { x, y } = this\r\n\r\n        this.x = cos(alpha) * x + sin(alpha) * y\r\n        this.y = cos(alpha) * y - sin(alpha) * x\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.x *= coordinates[0]\r\n        this.y *= coordinates[1]\r\n        this.z *= coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        // \r\n        this.translate(center.map(c => -c))\r\n\r\n        this._rotateZ(angles.alpha)\r\n        this._rotateY(angles.beta)\r\n        this._rotateX(angles.gamma)\r\n\r\n        //\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.x += coordinates[0]\r\n        this.y += coordinates[1]\r\n        this.z += coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        const { x, y, z } = this\r\n\r\n        // aux variables\r\n        const a = tan((Math.PI - fieldOfView) / 2)\r\n        const b = (near + far) / (2 * near * far)\r\n        const c = (2 * near * far) / (near - far)\r\n\r\n        this.x = a * x / (c * y)\r\n        this.y = b - 1 / (c * y)\r\n        this.z = a * z / (c * y)\r\n\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return { x: this.x, y: this.y, z: this.z }\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.points = this.points.map(point => point.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.points = this.points.map(point => point.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.points = this.points.map(point => point.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.points = this.points.map(point => point.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        const points = [...this.points, this.points[0]]\r\n        let ans = 0\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            ans += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return ans\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { mean } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        const coords = (i, j) => [\r\n            df.columns[j], df.index[i], df.values[i][j]\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.polygons = this.polygons.map(polygon => polygon.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.polygons = this.polygons.map(polygon => polygon.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll, color } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Marks = ({ df, angles, colorScale }) => {\r\n    let marks = new Surface3D(df)\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={path.area > 0 ? color(colorScale(path.colorValue)).darker() : colorScale(path.colorValue)}\r\n    />)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { linspace } from './utils'\r\nimport { Point3D } from './Point3D'\r\n\r\n\r\nexport const Walls = ({ df, trf, angles }) => {\r\n\r\n    let labels = []\r\n\r\n    // xWall\r\n    const x = angles.alpha > Math.PI ? -1.075 : 1.075\r\n\r\n    let xWall = trf(new Polygon3D([[x, 1, 1], [x, 1, -1], [x, -1, -1], [x, -1, 1]]))\r\n    let xGrid = []\r\n\r\n    for (let [i, y] of df.index.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        xGrid.push(\r\n            trf(new Polygon3D([[x, y, 1], [x, y, -1]]))\r\n        )\r\n    }\r\n\r\n    // yWall\r\n    const y = angles.alpha > 1.5 * Math.PI || angles.alpha < 0.5 * Math.PI ? -1.075 : 1.075\r\n\r\n    let yWall = trf(new Polygon3D([[1, y, 1], [1, y, -1], [-1, y, -1], [-1, y, 1]]))\r\n    let yGrid = []\r\n\r\n    for (let [i, x] of df.columns.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        yGrid.push(\r\n            trf(new Polygon3D([[x, y, 1], [x, y, -1]]))\r\n        )\r\n    }\r\n\r\n    let zGrid = []\r\n    \r\n    for (let z of linspace(1, -1, 5)) {\r\n\r\n        zGrid.push(\r\n            trf(new Polygon3D([[-1, y, z], [1, y, z]]))\r\n        )\r\n\r\n        zGrid.push(\r\n            trf(new Polygon3D([[x, -1, z], [x, 1, z]]))\r\n        )\r\n\r\n        labels.push({\r\n            text: 'F',\r\n            position: trf(new Point3D([x, y, z]))\r\n        })\r\n    }\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => {\r\n        selectAll('.xWall').data(xWall)\r\n        selectAll('.yWall').data(yWall)\r\n    })\r\n\r\n    return (<g>\r\n        {<path\r\n            className='xWall'\r\n            d={xWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />}\r\n        {xGrid.map(line => <path\r\n            className=''\r\n            d={line.data}\r\n            stroke='lightgrey'\r\n            strokeWidth='2'\r\n        />)}\r\n        {<path\r\n            className='yWall'\r\n            d={yWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />}\r\n        {yGrid.map(line => <path\r\n            className=''\r\n            d={line.data}\r\n            stroke='lightgrey'\r\n            strokeWidth='2'\r\n        />)}\r\n        {zGrid.map(line => <path\r\n            className=''\r\n            d={line.data}\r\n            stroke='lightgrey'\r\n            strokeWidth='2'\r\n        />)}\r\n        {/* {labels.map(({ text, position }) => <text\r\n            x={position.x}\r\n            y={position.z}\r\n            children={text}\r\n            fontSize='12'\r\n        />)} */}\r\n    </g>)\r\n}","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { Point3D } from './Point3D'\r\n\r\nexport const Floor = ({ df, trf, angles }) => {\r\n    let floor = trf(new Polygon3D([\r\n        [1, 1, 1.075], [1, -1, 1.075], [-1, -1, 1.075], [-1, 1, 1.075]\r\n    ]))\r\n\r\n    let grid = []\r\n    let labels = []\r\n\r\n    const x = angles.alpha < Math.PI ? -1.15 : 1.15\r\n\r\n    for (let [i, y] of df.index.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        let line = trf(new Polygon3D([[-1, y, 1.075], [1, y, 1.075]]))\r\n\r\n        grid.push(line)\r\n\r\n        labels.push({\r\n            text: df.labels.index[i],\r\n            position: trf(new Point3D([x, y, 1.1]))\r\n        })\r\n    }\r\n\r\n    const y = angles.alpha < 1.5 * Math.PI && angles.alpha > 0.5 * Math.PI ? -1.15 : 1.15\r\n\r\n    for (let [i, x] of df.columns.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        let line = trf(new Polygon3D([[x, -1, 1.075], [x, 1, 1.075]]))\r\n\r\n        grid.push(line)\r\n\r\n        labels.push({\r\n            text: df.labels.columns[i],\r\n            position: trf(new Point3D([x, y, 1.1]))\r\n        })\r\n    }\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.floor').selectAll('.base').data(floor))\r\n\r\n    return (\r\n        <g>\r\n            {<path\r\n                className='floor base'\r\n                d={floor.data}\r\n                opacity='60%'\r\n                fill='grey'\r\n            />}\r\n            {grid.map(line => <path\r\n                className='floor grid'\r\n                d={line.data}\r\n                stroke='lightgrey'\r\n                strokeWidth='1'\r\n            />)}\r\n            {labels.map(({ text, position }) => <text\r\n                x={position.x - 12}\r\n                y={position.z + 2}\r\n                children={text.toFixed(2)}\r\n                fontSize={12}\r\n            />)}\r\n        </g>\r\n    )\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { selectAll, select, drag, scaleSequential, interpolateViridis } from 'd3';\r\nimport { mod } from 'mathjs';\r\n\r\n// import { Point3D } from './Point3D';\r\nimport { compare } from './utils';\r\nimport { Marks } from './Marks';\r\nimport { Walls } from './Walls';\r\nimport { Floor } from './Floor';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: 7 * Math.PI / 4,\r\n    beta: 0,\r\n    gamma: 7 * Math.PI / 4\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n\r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha + (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        beta: angles.beta,\r\n        gamma: mod(angles.gamma - (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n        // .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n    })\r\n\r\n    // objects NOTE: creating new objects for every render might lead to performance issues\r\n    const scaleColor = scaleSequential(interpolateViridis).domain([1, -1])\r\n\r\n    const trf = obj => obj\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                <Floor df={df} trf={trf} angles={angles} />\r\n                <Walls df={df} trf={trf} angles={angles} />\r\n                <Marks df={df} angles={angles} colorScale={scaleColor} />\r\n                {/* <Labels camera={camera} df={df} /> */}\r\n\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData, normDataframe } from './utils'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataframe, setDataframe] = useState(null)\n\n  // before rendering\n  useEffect(\n    () => csv(url)\n      .then(readData)\n      .then(normDataframe)\n      .then(setDataframe),\n    []\n  )\n\n  if (!dataframe)\n    return 'Loading...'\n\n  return (\n    <div>\n      <Surface df={dataframe} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}