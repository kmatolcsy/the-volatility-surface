{"version":3,"sources":["utils.js","Point3D.js","Polygon3D.js","Surface3D.js","Marks.js","Walls.js","Floor.js","Surface.js","App.js","index.js"],"names":["readData","data","columns","slice","index_name","map","column","values","row","index","normDataframe","dataframe","scaleColumns","scaleLinear","domain","extent","range","scaleValues","flat","scaleIndex","x","compare","a","b","console","log","centroid","y","Point3D","coordinates","this","z","w","gamma","cos","sin","beta","alpha","angles","center","translate","c","_rotateZ","_rotateY","_rotateX","fieldOfView","near","far","tan","Math","PI","Polygon3D","points","generator","line","point","scale","rotate","perspective","mean","ans","i","length","p1","p2","Surface3D","df","polygons","coords","j","push","polygon","sort","Marks","colorScale","marks","useEffect","selectAll","paths","path","className","d","fill","area","color","colorValue","darker","Walls","xWall","yWall","opacity","Floor","floor","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","select","call","scaleColor","scaleSequential","interpolateViridis","transform","App","setDataframe","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8213305e.chunk.js","sourcesContent":["import { extent } from \"d3-array\"\r\nimport { scaleLinear } from \"d3-scale\"\r\n\r\nexport const readData = data => {\r\n    let columns = data.columns.slice(1)\r\n    const index_name = data.columns[0]\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const normDataframe = dataframe => {\r\n    // values are inverted\r\n    const scaleColumns = scaleLinear().domain(extent(dataframe.columns)).range([-1, 1])\r\n    const scaleValues = scaleLinear().domain(extent(dataframe.values.flat())).range([1, -1])\r\n    const scaleIndex = scaleLinear().domain(extent(dataframe.index)).range([-1, 1])\r\n\r\n    return {\r\n        columns: dataframe.columns.map(x => scaleColumns(x)),\r\n        values: dataframe.values.map(row => row.map(x => scaleValues(x))),\r\n        index: dataframe.index.map(x=> scaleIndex(x)),\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    console.log(a, b, a.centroid.y, b.centroid.y)\r\n    const coord = 'y'\r\n\r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { cos, sin, tan } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        // mutable coordinates\r\n        this.x = coordinates[0]\r\n        this.y = coordinates[1]\r\n        this.z = coordinates[2]\r\n        this.w = 1\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const { y, z } = this\r\n\r\n        this.y = cos(gamma) * y + sin(gamma) * z\r\n        this.z = cos(gamma) * z - sin(gamma) * y\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const { x, z } = this\r\n\r\n        this.x = cos(beta) * x - sin(beta) * z\r\n        this.z = cos(beta) * z + sin(beta) * x\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const { x, y } = this\r\n\r\n        this.x = cos(alpha) * x + sin(alpha) * y\r\n        this.y = cos(alpha) * y - sin(alpha) * x\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.x *= coordinates[0]\r\n        this.y *= coordinates[1]\r\n        this.z *= coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        // \r\n        this.translate(center.map(c => -c))\r\n\r\n        this._rotateZ(angles.alpha)\r\n        this._rotateY(angles.beta)\r\n        this._rotateX(angles.gamma)\r\n\r\n        //\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.x += coordinates[0]\r\n        this.y += coordinates[1]\r\n        this.z += coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        const { x, y, z } = this\r\n\r\n        // aux variables\r\n        const a = tan((Math.PI - fieldOfView) / 2)\r\n        const b = (near + far) / (2 * near * far)\r\n        const c = (2 * near * far) / (near - far)\r\n\r\n        this.x = a * x / (c * y)\r\n        this.y = b - 1 / (c * y)\r\n        this.z = a * z / (c * y)\r\n\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return { x: this.x, y: this.y, z: this.z }\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.points = this.points.map(point => point.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.points = this.points.map(point => point.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.points = this.points.map(point => point.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.points = this.points.map(point => point.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        const points = [...this.points, this.points[0]]\r\n        let ans = 0\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            ans += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return ans\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { mean } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        const coords = (i, j) => [\r\n            df.columns[j], df.index[i], df.values[i][j]\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.polygons = this.polygons.map(polygon => polygon.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.polygons = this.polygons.map(polygon => polygon.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll, color } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Marks = ({ df, angles, colorScale }) => {\r\n    let marks = new Surface3D(df)\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={path.area > 0 ? color(colorScale(path.colorValue)).darker() : colorScale(path.colorValue)}\r\n    />)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\n\r\n\r\nexport const Walls = ({ angles }) => {\r\n    // xWall\r\n    const x = angles.alpha > Math.PI ? -1.075 : 1.075\r\n\r\n    let xWall = new Polygon3D([[x, 1, 1], [x, 1, -1], [x, -1, -1], [x, -1, 1]])\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // yWall\r\n    const y = angles.alpha > 1.5 * Math.PI || angles.alpha < 0.5 * Math.PI ? -1.075 : 1.075\r\n\r\n    let yWall = new Polygon3D([[1, y, 1], [1, y, -1], [-1, y, -1], [-1, y, 1]])\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => {\r\n        selectAll('.xWall').data(xWall)\r\n        selectAll('.yWall').data(yWall)\r\n    })\r\n\r\n    return (<g>\r\n        <path\r\n            className='xWall'\r\n            d={xWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />\r\n        <path\r\n            className='yWall'\r\n            d={yWall.data}\r\n            opacity='60%'\r\n            fill='grey'\r\n        />\r\n    </g>)\r\n}","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\n\r\nexport const Floor = ({ angles }) => {\r\n    let floor = new Polygon3D([[1, 1, 1.075], [1, -1, 1.075], [-1, -1, 1.075], [-1, 1, 1.075]])\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.floor').data(floor))\r\n\r\n    return <path\r\n        className='floor'\r\n        d={floor.data}\r\n        opacity='60%'\r\n        fill='grey'\r\n    />\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { selectAll, select, drag, scaleSequential, interpolateViridis } from 'd3';\r\nimport { mod } from 'mathjs';\r\n\r\n// import { Point3D } from './Point3D';\r\nimport { compare } from './utils';\r\nimport { Marks } from './Marks';\r\nimport { Walls } from './Walls';\r\nimport { Floor } from './Floor';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: 7 * Math.PI / 4,\r\n    beta: 0,\r\n    gamma: 7 * Math.PI / 4\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n\r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha + (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        beta: angles.beta,\r\n        gamma: mod(angles.gamma - (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n        // .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n        console.log(selectAll('.three').sort(compare))\r\n    })\r\n\r\n    // objects NOTE: creating new objects for every render might lead to performance issues\r\n    const scaleColor = scaleSequential(interpolateViridis).domain([1, -1])\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                <Floor angles={angles} />\r\n                <Walls angles={angles} />\r\n                <Marks df={df} angles={angles} colorScale={scaleColor} />\r\n                {/* <Labels camera={camera} df={df} /> */}\r\n\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData, normDataframe } from './utils'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataframe, setDataframe] = useState(null)\n\n  // before rendering\n  useEffect(() => csv(url).then(readData).then(normDataframe).then(setDataframe), [])\n\n  if (!dataframe)\n    return 'Loading...'\n\n  console.log(dataframe)\n\n  return (\n    <div>\n      <Surface df={dataframe} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}