{"version":3,"sources":["utils.js","Point3D.js","Polygon3D.js","Surface3D.js","Marks.js","Walls.js","Floor.js","Camera.js","Surface.js","App.js","index.js"],"names":["readData","data","index_name","columns","slice","map","column","values","row","index","linspace","start","stop","num","endpoint","div","step","Array","from","length","_","i","compare","a","b","centroid","Point3D","coordinates","this","x","y","z","vector","matrix","trf","multiply","transformation","fieldOfView","near","far","tan","Math","PI","c","subset","Polygon3D","points","generator","line","point","scale","apply","perspective","mean","ans","p1","p2","Surface3D","df","polygons","normalize","arr","range","max","min","sum","extent","shiftX","scaleX","shiftY","scaleY","flat","shiftZ","scaleZ","coords","j","push","shape","polygon","sort","Marks","camera","marks","view","useEffect","selectAll","paths","scaleColor","scaleSequential","interpolateViridis","domain","path","className","d","fill","area","color","colorValue","darker","Walls","angles","xFill","alpha","xValues","xWall","yFill","yValues","value","yWall","opacity","Floor","floor","Camera","initCoordinates","transformations","gamma","cos","s","sin","beta","center","translate","rotations","_rotateX","_rotateY","_rotateZ","reduce","p","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","console","log","select","call","rotate","transform","App","dataFrame","setDataFrame","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7cd7f57.chunk.js","sourcesContent":["export const readData = data => {\r\n    const index_name = data.columns[0]\r\n    let columns = data.columns.slice(1)\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    const coord = 'y'\r\n    \r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { matrix, multiply, index, tan } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        const [x, y, z] = coordinates\r\n        // mutable coordinates\r\n        this.vector = matrix([\r\n            [x],\r\n            [y],\r\n            [z],\r\n            [1],\r\n        ])\r\n    }\r\n\r\n    // _rotateX(gamma) {\r\n    //     const c = cos(gamma)\r\n    //     const s = sin(gamma)\r\n\r\n    //     return matrix([\r\n    //         [1, 0, +0, 0],\r\n    //         [0, c, -s, 0],\r\n    //         [0, s, +c, 0],\r\n    //         [0, 0, +0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    // _rotateY(beta) {\r\n    //     const c = cos(beta)\r\n    //     const s = sin(beta)\r\n\r\n    //     return matrix([\r\n    //         [+c, 0, s, 0],\r\n    //         [+0, 1, 0, 0],\r\n    //         [-s, 0, c, 0],\r\n    //         [+0, 0, 0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    // _rotateZ(alpha) {\r\n    //     const c = cos(alpha)\r\n    //     const s = sin(alpha)\r\n\r\n    //     return matrix([\r\n    //         [c, -s, 0, 0],\r\n    //         [s, +c, 0, 0],\r\n    //         [0, +0, 1, 0],\r\n    //         [0, +0, 0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    scale(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [x, 0, 0, 0],\r\n            [0, y, 0, 0],\r\n            [0, 0, z, 0],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.vector = multiply(trf, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    // rotate(angles, center = [0, 0, 0]) {\r\n    //     this.translate(center.map(c => -c))\r\n\r\n    //     const rotations = [\r\n    //         this._rotateX(angles.gamma),\r\n    //         this._rotateY(angles.beta),\r\n    //         this._rotateZ(angles.alpha),\r\n    //     ]\r\n\r\n    //     const trf = rotations.reduce((p, c) => multiply(p, c))\r\n\r\n    //     this.vector = multiply(trf, this.vector)\r\n\r\n    //     this.translate(center)\r\n\r\n    //     return this\r\n    // }\r\n\r\n    // translate(coordinates) {\r\n    //     const [x, y, z] = coordinates\r\n\r\n    //     const trf = matrix([\r\n    //         [1, 0, 0, x],\r\n    //         [0, 1, 0, y],\r\n    //         [0, 0, 1, z],\r\n    //         [0, 0, 0, 1],\r\n    //     ])\r\n\r\n    //     this.vector = multiply(trf, this.vector)\r\n\r\n    //     return this\r\n    // }\r\n\r\n    apply(transformation) {\r\n        this.vector = multiply(transformation, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        const a = tan(0.5 * (Math.PI - fieldOfView))\r\n        const b = 2 * near * far / (near - far)\r\n        const c = (near + far) / (near - far)\r\n\r\n        const trf = matrix([\r\n            [a, +0, 0, 0],\r\n            [0, +c, 0, b],\r\n            [0, +0, a, 0],\r\n            [0, -1, 0, 0],\r\n        ])\r\n        \r\n        this.vector = multiply(trf, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    get x() {\r\n        return this.vector.subset(index(0, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get y() {\r\n        return this.vector.subset(index(1, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get z() {\r\n        return this.vector.subset(index(2, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.points = this.points.map(point => point.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    // rotate(angles, center = [0, 0, 0]) {\r\n    //     this.points = this.points.map(point => point.rotate(angles, center))\r\n    //     return this\r\n    // }\r\n\r\n    // translate(coordinates) {\r\n    //     this.points = this.points.map(point => point.translate(coordinates))\r\n    //     return this\r\n    // }\r\n\r\n    apply(transformation) {\r\n        this.points = this.points.map(point => point.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.points = this.points.map(point => point.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        let ans = 0\r\n        const points = [...this.points, this.points[0]]\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            ans += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return ans\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { extent } from 'd3-array'\r\nimport { min, max, mean, sum } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        // mapping from [min(a), max(a)] to [-1, 1]\r\n        const normalize = arr => {\r\n            const range = max(arr) - min(arr)\r\n            \r\n            if (range)\r\n                return [0.5 * sum(extent(arr)), 0.5 * range]\r\n\r\n            return [0, 1]\r\n        }\r\n\r\n        const [shiftX, scaleX] = normalize(df.columns)\r\n        const [shiftY, scaleY] = normalize(df.index)\r\n        const [shiftZ, scaleZ] = normalize(df.values.flat())\r\n\r\n        const coords = (i, j) => [\r\n            (df.columns[j] - shiftX) / scaleX,\r\n            (df.index[i] - shiftY) / scaleY,\r\n            (df.values[i][j] - shiftZ) / -scaleZ,\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.polygons = this.polygons.map(shape => shape.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    // rotate(angles, center = [0, 0, 0]) {\r\n    //     this.polygons = this.polygons.map(shape => shape.rotate(angles, center))\r\n    //     return this\r\n    // }\r\n\r\n    // translate(coordinates) {\r\n    //     this.polygons = this.polygons.map(shape => shape.translate(coordinates))\r\n    //     return this\r\n    // }\r\n\r\n    apply(transformation) {\r\n        this.polygons = this.polygons.map(shape => shape.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.polygons = this.polygons.map(shape => shape.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll, scaleSequential, interpolateViridis, color } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Marks = ({ df, camera }) => {\r\n    let marks = new Surface3D(df)\r\n        .apply(camera.view)\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([300, 300, 300])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    const scaleColor = scaleSequential(interpolateViridis)\r\n        .domain([1, -1])\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={path.area > 0 ? color(scaleColor(path.colorValue)).darker() : scaleColor(path.colorValue)}\r\n    />)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\nimport { linspace } from './utils'\r\n\r\n\r\nexport const Walls = ({ df, camera, angles }) => {\r\n    // z is mapped to y and therefore it's flipped\r\n    const [zMin, zMax] = [1, -1]\r\n\r\n    // xWall\r\n    const xFill = angles.alpha < Math.PI ? -1.075 : 1.075\r\n    const xValues = df.index.map(() => linspace(zMin, zMax, df.columns.length))\r\n\r\n    let xWall = new Surface3D({ ...df, columns: Array(df.columns.length).fill(xFill), values: xValues })\r\n        .apply(camera.view)\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([300, 300, 300])\r\n\r\n    // yWall\r\n    const yFill = angles.alpha > 1.5 * Math.PI || angles.alpha < 0.5 * Math.PI ? -1.075 : 1.075\r\n    const yValues = linspace(zMin, zMax, df.index.length).map(value => Array(df.columns.length).fill(value))\r\n\r\n    let yWall = new Surface3D({ ...df, index: Array(df.index.length).fill(yFill), values: yValues })\r\n        .apply(camera.view)\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([300, 300, 300])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => {\r\n        selectAll('.xWall').data(xWall.paths)\r\n        selectAll('.yWall').data(yWall.paths)\r\n    })\r\n\r\n    return (<g>\r\n        {xWall.paths.map((path, index) => <path\r\n            className='xWall'\r\n            key={index}\r\n            d={path.data}\r\n            opacity='0.6'\r\n            fill='gray'\r\n        />)}\r\n        {yWall.paths.map((path, index) => <path\r\n            className='yWall'\r\n            key={index}\r\n            d={path.data}\r\n            opacity='0.6'\r\n            fill='gray'\r\n        />)}\r\n    </g>)\r\n}","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Floor = ({ df, camera }) => {\r\n\r\n    let floor = new Surface3D({ ...df, values: df.values.map(row => row.map(() => -1.075)) })\r\n        .apply(camera.view)\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([300, 300, 300])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.floor').data(floor.paths))\r\n\r\n    return floor.paths.map((path, index) => <path\r\n        className='floor'\r\n        key={index}\r\n        d={path.data}\r\n        opacity='0.6'\r\n        fill='gray'\r\n    />)\r\n}","import { matrix, multiply, inv, sin, cos } from 'mathjs'\r\n\r\nexport class Camera {\r\n    constructor(initCoordinates = [0, 0, 0]) {\r\n        //\r\n        const [x, y, z] = initCoordinates\r\n\r\n        //\r\n        this.transformations = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const c = cos(gamma)\r\n        const s = sin(gamma)\r\n\r\n        return matrix([\r\n            [1, 0, +0, 0],\r\n            [0, c, -s, 0],\r\n            [0, s, +c, 0],\r\n            [0, 0, +0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const c = cos(beta)\r\n        const s = sin(beta)\r\n\r\n        return matrix([\r\n            [+c, 0, s, 0],\r\n            [+0, 1, 0, 0],\r\n            [-s, 0, c, 0],\r\n            [+0, 0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const c = cos(alpha)\r\n        const s = sin(alpha)\r\n\r\n        return matrix([\r\n            [c, -s, 0, 0],\r\n            [s, +c, 0, 0],\r\n            [0, +0, 1, 0],\r\n            [0, +0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    scale(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [x, 0, 0, 0],\r\n            [0, y, 0, 0],\r\n            [0, 0, z, 0],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.translate(center.map(c => -c))\r\n\r\n        const rotations = [\r\n            this._rotateX(angles.gamma),\r\n            this._rotateY(angles.beta),\r\n            this._rotateZ(angles.alpha),\r\n        ]\r\n\r\n        const trf = rotations.reduce((p, c) => multiply(p, c))\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    get view() {\r\n        // return inv(this.transformations)\r\n        return this.transformations\r\n    }\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { selectAll, select, drag } from 'd3';\r\nimport { mod } from 'mathjs';\r\n\r\n// import { Point3D } from './Point3D';\r\nimport { compare } from './utils';\r\nimport { Marks } from './Marks';\r\nimport { Walls } from './Walls';\r\nimport { Floor } from './Floor';\r\nimport { Camera } from './Camera';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: Math.PI / 4,\r\n    beta: 0,\r\n    gamma: Math.PI / 4\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n\r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha - (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        beta: angles.beta,\r\n        gamma: mod(angles.gamma + (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n            .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n    })\r\n\r\n    // objects NOTE: creating new objects for every render might lead to performance issues\r\n    let camera = new Camera()\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                <Floor df={df} camera={camera} />\r\n                <Walls df={df} camera={camera} angles={angles} />\r\n                <Marks df={df} camera={camera} />\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData } from './utils'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataFrame, setDataFrame] = useState(null)\n\n  // before rendering\n  useEffect(() => csv(url).then(readData).then(setDataFrame), [])\n\n  if (!dataFrame)\n    return 'Loading...'\n\n  return (\n    <div>\n      <Surface df={dataFrame} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}