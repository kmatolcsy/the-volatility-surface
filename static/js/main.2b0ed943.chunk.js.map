{"version":3,"sources":["utils.js","Point3D.js","Polygon3D.js","Surface3D.js","Marks.js","Camera.js","Surface.js","App.js","index.js"],"names":["readData","data","index_name","columns","slice","map","column","values","row","index","compare","a","b","centroid","Point3D","coordinates","this","x","y","z","vector","matrix","trf","multiply","transformation","fieldOfView","aspectRatio","near","far","f","tan","Math","PI","r","k","subset","Polygon3D","points","generator","line","point","scale","angles","center","rotate","translate","apply","perspective","mean","s","i","length","p1","p2","Surface3D","df","polygons","coords","j","push","shape","polygon","sort","Marks","camera","scaleColor","marks","view","useEffect","selectAll","paths","path","className","d","fill","area","color","colorValue","darker","Camera","initCoordinates","transformations","identity","gamma","c","cos","sin","beta","alpha","rotations","_rotateZ","_rotateY","_rotateX","reduce","p","inv","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","console","log","select","call","scaleSequential","interpolateViridis","domain","extent","flat","max","min","transform","App","dataFrame","setDataFrame","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b0ed943.chunk.js","sourcesContent":["export const readData = data => {\r\n    const index_name = data.columns[0]\r\n    let columns = data.columns.slice(1)\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    const coord = 'y'\r\n    \r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { scaleLinear } from 'd3-scale';\r\nimport { matrix, multiply, index, sin, cos, tan } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        const [x, y, z] = coordinates\r\n        // mutable coordinates\r\n        this.vector = matrix([\r\n            [x],\r\n            [y],\r\n            [z],\r\n            [1],\r\n        ])\r\n    }\r\n\r\n    // _rotateX(gamma) {\r\n    //     const c = cos(gamma)\r\n    //     const s = sin(gamma)\r\n\r\n    //     return matrix([\r\n    //         [1, 0, +0, 0],\r\n    //         [0, c, -s, 0],\r\n    //         [0, s, +c, 0],\r\n    //         [0, 0, +0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    // _rotateY(beta) {\r\n    //     const c = cos(beta)\r\n    //     const s = sin(beta)\r\n\r\n    //     return matrix([\r\n    //         [+c, 0, s, 0],\r\n    //         [+0, 1, 0, 0],\r\n    //         [-s, 0, c, 0],\r\n    //         [+0, 0, 0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    // _rotateZ(alpha) {\r\n    //     const c = cos(alpha)\r\n    //     const s = sin(alpha)\r\n\r\n    //     return matrix([\r\n    //         [c, -s, 0, 0],\r\n    //         [s, +c, 0, 0],\r\n    //         [0, +0, 1, 0],\r\n    //         [0, +0, 0, 1],\r\n    //     ])\r\n    // }\r\n\r\n    scale(coordinates) {\r\n        // this.x = scales.x(this.x)\r\n        // this.y = scales.y(this.y)\r\n        // this.z = scales.z(this.z)\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [x, 0, 0, 0],\r\n            [0, y, 0, 0],\r\n            [0, 0, z, 0],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.vector = multiply(trf, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    // rotate(angles, center = [0, 0, 0]) {\r\n    //     this.translate(center.map(c => -c))\r\n\r\n    //     const rotations = [\r\n    //         this._rotateX(angles.gamma),\r\n    //         this._rotateY(angles.beta),\r\n    //         this._rotateZ(angles.alpha),\r\n    //     ]\r\n\r\n    //     const trf = rotations.reduce((p, c) => multiply(p, c))\r\n\r\n    //     this.vector = multiply(trf, this.vector)\r\n\r\n    //     this.translate(center)\r\n\r\n    //     return this\r\n    // }\r\n\r\n    translate(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.vector = multiply(trf, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.vector = multiply(transformation, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, aspectRatio, near, far) {\r\n        const f = tan(0.5 * (Math.PI - fieldOfView))\r\n        const r = 1 / (near - far)\r\n\r\n        const x = f / aspectRatio\r\n        const y = r * (near + far)\r\n        const z = f\r\n        const k = 2 * r * near * far \r\n\r\n        const trf = matrix([\r\n            [x, +0, 0, 0],\r\n            [0, +y, 0, k],\r\n            [0, +0, z, 0],\r\n            [0, -1, 0, 0],\r\n        ])\r\n        \r\n        this.vector = multiply(trf, this.vector)\r\n\r\n        return this\r\n    }\r\n\r\n    get x() {\r\n        return this.vector.subset(index(0, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get y() {\r\n        return this.vector.subset(index(1, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n\r\n    get z() {\r\n        return this.vector.subset(index(2, 0)) / this.vector.subset(index(3, 0))\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.points = this.points.map(point => point.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.points = this.points.map(point => point.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.points = this.points.map(point => point.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.points = this.points.map(point => point.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, aspectRatio, near, far) {\r\n        this.points = this.points.map(point => point.perspective(fieldOfView, aspectRatio, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        let s = 0\r\n        const points = [...this.points, this.points[0]]\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            s += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return s\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { min, max, mean } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        const coords = (i, j) => [\r\n            df.columns[j], df.index[i], df.values[i][j]\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.polygons = this.polygons.map(shape => shape.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.polygons = this.polygons.map(shape => shape.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.polygons = this.polygons.map(shape => shape.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    apply(transformation) {\r\n        this.polygons = this.polygons.map(shape => shape.apply(transformation))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, aspectRatio, near, far) {\r\n        this.polygons = this.polygons.map(shape => shape.perspective(fieldOfView, aspectRatio, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll, color } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\nimport { max, min } from 'mathjs'\r\n\r\nexport const Marks = ({ df, camera, scaleColor }) => {\r\n    let marks = new Surface3D(df)\r\n        // .translate([\r\n        //     -min(df.columns),\r\n        //     -min(df.index),\r\n        //     -min(df.values.flat()),\r\n        // ])\r\n        // .scale([\r\n        //     1 / (max(df.columns) - min(df.columns)),\r\n        //     1 / (max(df.index) - min(df.index)),\r\n        //     1 / (max(df.values.flat()) - min(df.values.flat())),\r\n        // ])\r\n        // .scale([1, 3, -3])\r\n        // .rotate(angles, [center.x, center.y, center.z])\r\n        // .translate([-center.x, -11, -center.z])\r\n        .apply(camera.view)\r\n        .perspective(Math.PI / 8, 1, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={path.area > 0 ? color(scaleColor(path.colorValue)).darker() : color(scaleColor(path.colorValue))}\r\n    />)\r\n}\r\n","import { matrix, identity, multiply, inv, sin, cos } from 'mathjs'\r\n\r\nexport class Camera {\r\n    constructor(initCoordinates = [0, 0, 0]) {\r\n        //\r\n        this.coordinates = initCoordinates\r\n\r\n        //\r\n        const [x, y, z] = initCoordinates\r\n        this.vector = matrix([[x], [y], [z], [1]])\r\n\r\n        //\r\n        this.transformations = identity(4)\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const c = cos(gamma)\r\n        const s = sin(gamma)\r\n\r\n        return matrix([\r\n            [1, 0, +0, 0],\r\n            [0, c, -s, 0],\r\n            [0, s, +c, 0],\r\n            [0, 0, +0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const c = cos(beta)\r\n        const s = sin(beta)\r\n\r\n        return matrix([\r\n            [+c, 0, s, 0],\r\n            [+0, 1, 0, 0],\r\n            [-s, 0, c, 0],\r\n            [+0, 0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const c = cos(alpha)\r\n        const s = sin(alpha)\r\n\r\n        return matrix([\r\n            [c, -s, 0, 0],\r\n            [s, +c, 0, 0],\r\n            [0, +0, 1, 0],\r\n            [0, +0, 0, 1],\r\n        ])\r\n    }\r\n\r\n    scale(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [x, 0, 0, 0],\r\n            [0, y, 0, 0],\r\n            [0, 0, z, 0],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.translate(center.map(c => -c))\r\n\r\n        const rotations = [\r\n            this._rotateZ(angles.alpha),\r\n            this._rotateY(angles.beta),\r\n            this._rotateX(angles.gamma),\r\n        ]\r\n\r\n        const trf = rotations.reduce((p, c) => multiply(p, c))\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        const [x, y, z] = coordinates\r\n\r\n        const trf = matrix([\r\n            [1, 0, 0, x],\r\n            [0, 1, 0, y],\r\n            [0, 0, 1, z],\r\n            [0, 0, 0, 1],\r\n        ])\r\n\r\n        this.transformations = multiply(trf, this.transformations)\r\n\r\n        return this\r\n    }\r\n\r\n    get view() {\r\n        return inv(this.transformations)\r\n    }\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { scaleLinear, scaleSequential, interpolateViridis, extent, selectAll, select, drag } from 'd3';\r\nimport { max, mean, min, mod } from 'mathjs';\r\n\r\n// import { Point3D } from './Point3D';\r\nimport { compare } from './utils';\r\nimport { Marks } from './Marks';\r\nimport { Walls } from './Walls';\r\nimport { Floor } from './Floor';\r\nimport { Camera } from './Camera';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: Math.PI / 4,\r\n    beta: 0,\r\n    gamma: Math.PI / 8\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n\r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha + (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI), //angles.alpha,\r\n        beta: angles.beta, // mod(angles.beta + (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        gamma: mod(angles.gamma - (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n            .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n    })\r\n\r\n    // scales\r\n    // const scaleAxes = {\r\n    //     x: scaleLinear()\r\n    //         .domain(extent(df.columns))\r\n    //         .range([0, height / 2]),\r\n\r\n    //     y: scaleLinear()\r\n    //         .domain(extent(df.index))\r\n    //         .range([0, height / 2]),\r\n\r\n    //     z: scaleLinear()\r\n    //         .domain(extent(df.values.flat()))\r\n    //         .range([height / 2, 0])\r\n    //         .nice()\r\n    // }\r\n\r\n    const scaleColor = scaleSequential(interpolateViridis)\r\n        .domain(extent(df.values.flat()))\r\n\r\n    // objects NOTE: creating new objects for every render might lead to performance issues\r\n    // let center = new Point3D([1, 1, mean(df.values.flat())])\r\n    // .scale([1, 3, -3])\r\n\r\n    let camera = new Camera()\r\n        .translate([1, 1 + 15, 1])\r\n        .rotate(angles, [1, 1, 1])\r\n        .scale([\r\n            (max(df.columns) - min(df.columns)) / 2,\r\n            (max(df.index) - min(df.index)) / 2,\r\n            (min(df.values.flat()) - max(df.values.flat())) / 2,\r\n        ])\r\n        .translate([\r\n            min(df.columns),\r\n            min(df.index),\r\n            max(df.values.flat()),\r\n        ])\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                {/* <Floor df={df} scaleAxes={scaleAxes} center={center} angles={angles} /> */}\r\n                {/* <Walls df={df} scaleAxes={scaleAxes} center={center} angles={angles} /> */}\r\n\r\n                <Marks df={df} camera={camera} scaleColor={scaleColor} />\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData } from './utils'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataFrame, setDataFrame] = useState(null)\n\n  // before rendering\n  useEffect(() => csv(url).then(readData).then(setDataFrame), [])\n\n  if (!dataFrame)\n    return 'Loading...'\n\n  return (\n    <div>\n      <Surface df={dataFrame} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}