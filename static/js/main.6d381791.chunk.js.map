{"version":3,"sources":["Point3D.js","Polygon3D.js","Base.js","utils.js","Grid.js","Surface3D.js","Marks.js","Surface.js","App.js","index.js"],"names":["Point3D","coordinates","this","x","y","z","w","gamma","cos","sin","beta","alpha","angles","center","translate","map","c","_rotateZ","_rotateY","_rotateX","fieldOfView","near","far","a","tan","Math","PI","b","Polygon3D","points","generator","line","point","scale","rotate","perspective","mean","ans","i","length","p1","p2","Base","trf","base","d","data","className","readData","columns","slice","index_name","column","values","row","index","normDataframe","dataframe","scaleColumns","scaleLinear","domain","extent","range","scaleValues","flat","nice","scaleIndex","labels","linspace","start","stop","num","endpoint","div","step","Array","from","_","compare","centroid","Grid","df","labelOffset","grid","entries","push","labelText","toFixed","labelPosition","value","children","Surface3D","polygons","coords","j","polygon","sort","Marks","colors","marks","useEffect","selectAll","paths","path","fill","initialAngles","Surface","width","height","useState","setAngles","entryPoint","useRef","handleStart","event","current","handleDrag","mod","dragBehaviour","drag","on","select","call","obj","transform","hex","scaleSequential","interpolateViridis","colorValue","area","color","darker","App","setDataframe","csv","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d381791.chunk.js","sourcesContent":["import { cos, sin, tan } from 'mathjs';\r\n\r\nexport class Point3D {\r\n    constructor(coordinates) {\r\n        // original coordinates\r\n        this.coordinates = coordinates\r\n\r\n        // mutable coordinates\r\n        this.x = coordinates[0]\r\n        this.y = coordinates[1]\r\n        this.z = coordinates[2]\r\n        this.w = 1\r\n    }\r\n\r\n    _rotateX(gamma) {\r\n        const { y, z } = this\r\n\r\n        this.y = cos(gamma) * y + sin(gamma) * z\r\n        this.z = cos(gamma) * z - sin(gamma) * y\r\n    }\r\n\r\n    _rotateY(beta) {\r\n        const { x, z } = this\r\n\r\n        this.x = cos(beta) * x - sin(beta) * z\r\n        this.z = cos(beta) * z + sin(beta) * x\r\n    }\r\n\r\n    _rotateZ(alpha) {\r\n        const { x, y } = this\r\n\r\n        this.x = cos(alpha) * x + sin(alpha) * y\r\n        this.y = cos(alpha) * y - sin(alpha) * x\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.x *= coordinates[0]\r\n        this.y *= coordinates[1]\r\n        this.z *= coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        // \r\n        this.translate(center.map(c => -c))\r\n\r\n        this._rotateZ(angles.alpha)\r\n        this._rotateY(angles.beta)\r\n        this._rotateX(angles.gamma)\r\n\r\n        //\r\n        this.translate(center)\r\n\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.x += coordinates[0]\r\n        this.y += coordinates[1]\r\n        this.z += coordinates[2]\r\n\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        const { x, y, z } = this\r\n\r\n        // aux variables\r\n        const a = tan((Math.PI - fieldOfView) / 2)\r\n        const b = (near + far) / (2 * near * far)\r\n        const c = (2 * near * far) / (near - far)\r\n\r\n        this.x = a * x / (c * y)\r\n        this.y = b - 1 / (c * y)\r\n        this.z = a * z / (c * y)\r\n\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return { x: this.x, y: this.y, z: this.z }\r\n    }\r\n}","import { mean } from 'mathjs'\r\nimport { line } from 'd3'\r\n\r\nimport { Point3D } from './Point3D'\r\n\r\nexport class Polygon3D {\r\n    constructor(points, generator = line()) {\r\n        this.points = points.map(point => new Point3D(point))\r\n        this.generator = generator\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.points = this.points.map(point => point.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.points = this.points.map(point => point.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.points = this.points.map(point => point.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.points = this.points.map(point => point.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.points.map(point => point.x)),\r\n            y: mean(this.points.map(point => point.y)),\r\n            z: mean(this.points.map(point => point.z))\r\n        }\r\n    }\r\n\r\n    get area() {\r\n        const points = [...this.points, this.points[0]]\r\n        let ans = 0\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n\r\n            let p1 = points[i]\r\n            let p2 = points[i + 1]\r\n\r\n            ans += (p2.x - p1.x) * (p2.z + p1.z)\r\n        }\r\n\r\n        return ans\r\n    }\r\n\r\n    get data() {\r\n        // orthogonal projection\r\n        return this.generator(this.points.map(point => [point.x, point.z]))\r\n    }\r\n\r\n    get colorValue() {\r\n        // mean of original z-values\r\n        return mean(this.points.map(point => point.coordinates[2]))\r\n    }\r\n}","import { Polygon3D } from './Polygon3D'\r\n\r\nexport const Base = ({ trf, angles }) => {\r\n    const x = angles.alpha > Math.PI ? -1 : 1\r\n    const y = angles.alpha > 1.5 * Math.PI || angles.alpha < 0.5 * Math.PI ? -1 : 1\r\n    const z = angles.gamma > Math.PI ? 1 : -1\r\n\r\n    let bases = [\r\n        trf(new Polygon3D([[x, 1, 1], [x, 1, -1], [x, -1, -1], [x, -1, 1]])),\r\n        trf(new Polygon3D([[1, y, 1], [1, y, -1], [-1, y, -1], [-1, y, 1]])),\r\n        trf(new Polygon3D([[1, 1, z], [1, -1, z], [-1, -1, z], [-1, 1, z]]))\r\n    ]\r\n\r\n    return bases.map(base => <path\r\n        d={base.data}\r\n        className='base'\r\n    />)\r\n}","import { extent } from \"d3-array\"\r\nimport { scaleLinear } from \"d3-scale\"\r\n\r\nexport const readData = data => {\r\n    let columns = data.columns.slice(1)\r\n    const index_name = data.columns[0]\r\n\r\n    return {\r\n        columns: columns.map(column => +column),\r\n        values: data.map(row => columns.map(column => +row[column])),\r\n        index: data.map(row => +row[index_name])\r\n    }\r\n}\r\n\r\nexport const normDataframe = dataframe => {\r\n    // values are inverted\r\n    const scaleColumns = scaleLinear().domain(extent(dataframe.columns)).range([-1, 1])\r\n    const scaleValues = scaleLinear().domain(extent(dataframe.values.flat())).range([1, -1]).nice()\r\n    const scaleIndex = scaleLinear().domain(extent(dataframe.index)).range([-1, 1])\r\n\r\n    return {\r\n        columns: dataframe.columns.map(x => scaleColumns(x)),\r\n        values: dataframe.values.map(row => row.map(x => scaleValues(x))),\r\n        index: dataframe.index.map(x=> scaleIndex(x)),\r\n        scale: scaleValues,\r\n        labels: dataframe,\r\n    }\r\n}\r\n\r\nexport const linspace = (start, stop, num, endpoint = true) => {\r\n    const div = endpoint ? (num - 1) : num;\r\n    const step = (stop - start) / div;\r\n    return Array.from({ length: num }, (_, i) => start + step * i);\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    const coord = 'y'\r\n\r\n    if (a.centroid[coord] < b.centroid[coord]) return +1\r\n    if (a.centroid[coord] > b.centroid[coord]) return -1\r\n    return 0\r\n}\r\n","import { Polygon3D } from './Polygon3D'\r\nimport { Point3D } from './Point3D'\r\nimport { linspace } from './utils'\r\n\r\n\r\nexport const Grid = ({ df, trf, angles }) => {\r\n    const x = angles.alpha < Math.PI ? -1 : 1\r\n    const y = angles.alpha < 1.5 * Math.PI && angles.alpha > 0.5 * Math.PI ? -1 : 1\r\n    const z = angles.gamma > Math.PI ? 1 : -1\r\n\r\n    const labelOffset = 1.23\r\n\r\n    let grid = []\r\n\r\n    for (let [i, y] of df.index.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        grid.push({\r\n            labelText: df.labels.index[i].toFixed(2),\r\n            labelPosition: trf(new Point3D([x * labelOffset, y, z * labelOffset])),\r\n            line: trf(new Polygon3D([[-x, y, -z], [-x, y, z], [x, y, z]]))\r\n        })\r\n    }\r\n\r\n    for (let [i, x] of df.columns.entries()) {\r\n\r\n        if (i % 2) continue\r\n\r\n        grid.push({\r\n            labelText: df.labels.columns[i].toFixed(2),\r\n            labelPosition: trf(new Point3D([x, y * labelOffset, z * labelOffset])),\r\n            line: trf(new Polygon3D([[x, -y, -z], [x, -y, z], [x, y, z]]))\r\n        })\r\n    }\r\n\r\n    const step = 5\r\n    const values = linspace(...df.scale.domain(), step)\r\n\r\n    for (let [i, z] of values.map(value => df.scale(value)).entries()) {\r\n\r\n        grid.push({\r\n            labelText: values[i].toFixed(2),\r\n            labelPosition: trf(new Point3D([-y * labelOffset, x * labelOffset, z])),\r\n            line: trf(new Polygon3D([[x, -y, z], [-x, -y, z], [-x, y, z]]))\r\n        })\r\n    }\r\n\r\n    return grid.map(({ labelText, labelPosition, line }) => <g>\r\n        <path\r\n            d={line.data}\r\n            className='grid'\r\n        />\r\n        <text\r\n            x={labelPosition.x - 12}\r\n            y={labelPosition.z + 2}\r\n            children={labelText}\r\n            className='label'\r\n        />\r\n    </g>)\r\n}","import { mean } from 'mathjs'\r\n\r\nimport { Polygon3D } from './Polygon3D'\r\nimport { compare } from './utils'\r\n\r\nexport class Surface3D {\r\n    constructor(df) {\r\n        this.df = df\r\n\r\n        this.polygons = [] // paths\r\n\r\n        const coords = (i, j) => [\r\n            df.columns[j], df.index[i], df.values[i][j]\r\n        ]\r\n\r\n        const points = (i, j) => [\r\n            coords(i, j), coords(i, j + 1), coords(i + 1, j + 1), coords(i + 1, j),\r\n        ]\r\n\r\n        for (let i = 0; i < df.index.length - 1; i++) {\r\n            for (let j = 0; j < df.columns.length - 1; j++) {\r\n                this.polygons.push(new Polygon3D(points(i, j)))\r\n            }\r\n        }\r\n    }\r\n\r\n    scale(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.scale(coordinates))\r\n        return this\r\n    }\r\n\r\n    rotate(angles, center = [0, 0, 0]) {\r\n        this.polygons = this.polygons.map(polygon => polygon.rotate(angles, center))\r\n        return this\r\n    }\r\n\r\n    translate(coordinates) {\r\n        this.polygons = this.polygons.map(polygon => polygon.translate(coordinates))\r\n        return this\r\n    }\r\n\r\n    perspective(fieldOfView, near, far) {\r\n        this.polygons = this.polygons.map(polygon => polygon.perspective(fieldOfView, near, far))\r\n        return this\r\n    }\r\n\r\n    get centroid() {\r\n        return {\r\n            x: mean(this.polygons.map(polygon => polygon.centroid.x)),\r\n            y: mean(this.polygons.map(polygon => polygon.centroid.y)),\r\n            z: mean(this.polygons.map(polygon => polygon.centroid.z))\r\n        }\r\n    }\r\n\r\n    get paths() {\r\n        return this.polygons.sort(compare)\r\n    }\r\n}","import { useEffect } from 'react'\r\nimport { selectAll } from 'd3'\r\n\r\nimport { Surface3D } from './Surface3D'\r\n\r\nexport const Marks = ({ df, trf, colors }) => {\r\n    let marks = trf(new Surface3D(df))\r\n\r\n    // bind the data to the DOM elemenents\r\n    useEffect(() => selectAll('.marks').data(marks.paths))\r\n\r\n    return marks.paths.map((path, index) => <path\r\n        className='three marks'\r\n        key={index}\r\n        d={path.data}\r\n        fill={colors(path)}\r\n    />)\r\n}\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { selectAll, select, drag, scaleSequential, interpolateViridis, color } from 'd3';\r\nimport { mod } from 'mathjs';\r\n\r\nimport { Base } from './Base';\r\nimport { Grid } from './Grid';\r\nimport { Marks } from './Marks';\r\nimport { compare } from './utils';\r\n\r\n\r\nconst initialAngles = {\r\n    alpha: 7 * Math.PI / 4,\r\n    beta: 0,\r\n    gamma: 7 * Math.PI / 4\r\n}\r\n\r\nexport const Surface = ({ df, width, height }) => {\r\n    let [angles, setAngles] = useState(initialAngles)\r\n    let entryPoint = useRef({ x: 0, y: 0 })\r\n\r\n    // dragging behaviour\r\n    const handleStart = event => {\r\n        entryPoint.current = { x: event.x, y: event.y }\r\n    }\r\n\r\n    const handleDrag = event => setAngles({\r\n        alpha: mod(angles.alpha + (event.x - entryPoint.current.x) / 300 * Math.PI, 2 * Math.PI),\r\n        beta: angles.beta,\r\n        gamma: mod(angles.gamma - (event.y - entryPoint.current.y) / 300 * Math.PI, 2 * Math.PI)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const dragBehaviour = drag()\r\n            .on('start', handleStart)\r\n            .on('drag', handleDrag)\r\n        // .on('end', event => console.log('end'))\r\n\r\n        select('svg').call(dragBehaviour)\r\n\r\n        selectAll('.three').sort(compare)\r\n    })\r\n\r\n    const colors = path => {\r\n        const scale = scaleSequential(interpolateViridis).domain([1, -1])\r\n        const hex = scale(path.colorValue)\r\n\r\n        return path.area < 0 ? hex : color(hex).darker()\r\n    }\r\n\r\n    const trf = obj => obj\r\n        .rotate(angles)\r\n        .translate([0, -10, 0])\r\n        .perspective(Math.PI / 8, 1, 200)\r\n        .scale([500, 500, 500])\r\n\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n                <Base df={df} trf={trf} angles={angles} />\r\n                <Grid df={df} trf={trf} angles={angles} />\r\n                <Marks df={df} trf={trf} colors={colors} />\r\n            </g>\r\n            <text x={10} y={10}>Alpha: {angles.alpha}</text>\r\n            <text x={10} y={30}>Beta: {angles.beta}</text>\r\n            <text x={10} y={50}>Gamma: {angles.gamma}</text>\r\n        </svg>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport { Surface } from './Surface'\nimport { readData, normDataframe } from './utils'\nimport './App.css'\n\n\nconst url = 'https://raw.githubusercontent.com/kmatolcsy/options/master/2021-04-16/implied_vols_parametric_dfw.csv'\n\nexport const App = () => {\n  let [dataframe, setDataframe] = useState(null)\n\n  // before rendering\n  useEffect(\n    () => csv(url)\n      .then(readData)\n      .then(normDataframe)\n      .then(setDataframe),\n    []\n  )\n\n  if (!dataframe)\n    return 'Loading...'\n\n  return (\n    <div>\n      <Surface df={dataframe} width={900} height={600} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}